{"version":3,"sources":["common/header.js","common/tableView.js","graphql/queries.js","graphql/mutations.js","commonMethods.js","common/conformationModal.js","common/spinner.js","pages/home.js","validationFieldTypes.js","common/addressForm.js","common/draggableModal.js","common/multiSelectText.js","pages/empform.js","pages/empdetails.js","common/searchField.js","pages/layout.js","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","addNew","textDecoration","color","StyledTableCell","withStyles","head","backgroundColor","palette","common","white","body","fontSize","cursor","TableCell","StyledTableRow","background","default","TableRow","useStyles","table","minWidth","margin","TableViewWithAction","props","classes","isAction","heading","bodyData","edit","del","deleteMutate","routerLink","TableContainer","component","Paper","Table","className","aria-label","TableHead","map","item","index","key","label","length","TableBody","bData","h","scope","onClick","empId","id","IconButton","style","marginLeft","gql","GET_EMPLOYEE_BY_ID","GET_EMPLOYEES","UPDATE_ADDRESS","UPDATE_SKILL","UPDATE_EMPLOYEE","DELETE_EMPLOYEE","DELETE_SKILL","DELETE_ADDRESS","CREATE_EMPLOYEE","CREATE_ADDRESS","CREATE_SKILL","employeesPartitioning","emps","adds","skills","i","e","filter","a","addresss","push","s","dataTrim","line1","name","entries","len","substring","isValid","data","fieldTypes","error","Object","ft","type","_","isEmpty","ConformationModal","isOpen","confirm","cancel","message","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","Spinner","CircularProgress","disableShrink","Home","searchReq","searchValue","history","useHistory","useState","deleteData","previousSearchValue","state","setState","useQuery","loading","modifyData","listEmployees","items","listAddresss","listSkills","temp","d","isSplice","firstName","toLowerCase","includes","lastName","findIndex","getFilterData","useMutation","deleteEmployeeMutate","deleteAddressMutate","deleteSkillMutate","useEffect","deleteSkills","skillIds","variables","deleteAddresss","addressIds","deleteEmp","refetchQueries","query","navEmpForm","empValidationFields","addressValidationFields","width","typography","pxToRem","fontWeight","fontWeightRegular","formControl","selectEmpty","marginTop","cities","stateId","states","AddresssForm","form","line2","zipcode","city","editIndex","setData","ancestorSetState","collectDelId","find","c","Card","CardHeader","CardContent","noValidate","autoComplete","Grid","container","xs","TextField","required","onChange","target","value","variant","select","handleStateChange","helperText","isNaN","CardActions","add","dataId","deleteMut","splice","PaperComponent","handle","DraggableModal","React","errors","close","keys","MultiSelectTextField","setValue","fieldKey","ancestorStateChange","chips","onKeyDown","keyCode","undefined","keyPress","Chip","onDelete","handleDelete","pos","marginBottom","createEmp","createEmployeeMutate","createEmployee","createAddresss","createAddressMutate","createSkills","createSkillMutate","save","setStateData","isErrorModal","handleFormChange","Empform","skill","delAddressIds","delSkillIds","address","match","params","onCompleted","createAddressAndSkill","updateEmployeeMutate","updateAddressMutate","updateSkillMutate","getEmployee","Update","console","log","skillId","Empdetails","padding","display","alignItems","input","flex","iconButton","divider","height","SearchField","searchHandler","InputBase","placeholder","inputProps","handleChange","startSearch","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","justifyContent","content","contentShift","Layout","useTheme","sideMenus","isDrawer","isSearchReq","bool","CssBaseline","AppBar","position","clsx","Toolbar","edge","Typography","noWrap","Drawer","anchor","paper","direction","List","emp","to","ListItem","button","ListItemIcon","ListItemText","primary","path","render","exact","client","App","Boolean","window","location","hostname","awsmobile","cache","InMemoryCache","httpLink","HttpLink","uri","headers","authLink","setContext","authorization","ApolloClient","link","concat","Amplify","configure","config","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8691b3a2.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  addNew: {\n    textDecoration: 'none',\n    color: 'white'\n  }\n}));\n\nexport default function Header(props) {\n  const classes = useStyles();\n  const {addNew, label} = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <Typography variant=\"h6\" className={classes.title}>\n              {label}\n          </Typography>\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n          </Typography>\n          {\n            addNew && <Button color=\"inherit\">{addNew}</Button>\n          }\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Box from \"@material-ui/core/Box\";\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: \"#b1b6ba\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n    cursor: \"pointer\"\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\n// function createData(data, keys) {\n//   data.filter(d => {\n//     const temp = {}\n//     keys.filter(k => { temp[k] = d[key]; return ;});\n//   });\n//   return data.map(d => d)\n//   return { firstName, lastName, address, skill, id};\n// }\n\n// const rows = (data, heading) => {\n//   return  createData(data, [...heading.map(item => item.key, 'id')]);\n//   //  createData(item[heading[0].key], item[heading[1].key], item[heading[2].key], item[heading[3].key], item['id'])\n//   // );\n// };\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n    minWidth: 700\n  },\n  margin: {\n    margin: theme.spacing(-1.8)\n  }\n}));\n\nexport default function TableViewWithAction(props) {\n  const classes = useStyles();\n  const { isAction, heading, bodyData, edit, del, deleteMutate, routerLink } = props;\n  const cellClick = (empId) => {\n    if(routerLink) {\n      routerLink(empId);\n    }\n  }\n  // console.log(rows(bodyData, heading));\n  // console.log(bodyData);\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            {heading.map((item, index) => (\n              <StyledTableCell key={index}>{item.label}</StyledTableCell>\n            ))}\n            {isAction ? (\n              <>\n                <StyledTableCell key={heading.length}>Actions</StyledTableCell>\n              </>\n            ) : null}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {bodyData.map((bData, index) => (\n            <StyledTableRow key={index}>\n              {props.heading.map((h, index) => (\n                <StyledTableCell component=\"th\" scope=\"row\" key={index} onClick={() => cellClick(bData.id)}>\n                  {bData[h.key]}\n                </StyledTableCell>\n              ))}\n              {isAction ? (\n                <>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    <span>\n                      <IconButton\n                        aria-label=\"delete\"\n                        className={classes.margin}\n                        onClick={() => edit(bData.id, index)}\n                      >\n                        <EditIcon fontSize=\"small\" />\n                      </IconButton>\n                    </span>\n                    <span style={{ marginLeft: \"25px\" }}>\n                      <IconButton\n                        aria-label=\"delete\"\n                        className={classes.margin}\n                        onClick={() => del(bData.id, deleteMutate, index, bData)}\n                      >\n                        <DeleteIcon fontSize=\"small\" />\n                      </IconButton>\n                    </span>\n                  </StyledTableCell>\n                </>\n              ) : null}\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import gql from \"graphql-tag\";\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const GET_EMPLOYEE_NAMES = gql`\n  query {\n    listEmployees {\n      items {\n        id\n        firstName\n        lastName\n      }\n    }\n  }\n`;\n\nexport const GET_EMPLOYEE_BY_ID = gql`\n  query empById($id: ID!, $empId: String) {\n    getEmployee(id: $id) {\n      id\n      firstName\n      lastName\n    }\n    listAddresss(filter: { empId: { contains: $empId } }) {\n      items {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n    }\n    listSkills(filter: { empId: { contains: $empId } }) {\n      items {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\n\nexport const GET_EMPLOYEES = gql`\n  query {\n    listEmployees {\n      items {\n        id\n        firstName\n        lastName\n      }\n    }\n    listAddresss {\n      items {\n        id\n        line1\n        line2\n        zipcode\n        state\n        city\n        empId\n      }\n    }\n    listSkills {\n      items {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\n\nexport const getEmployee = /* GraphQL */ `\n  query GetEmployee($id: ID!) {\n    getEmployee(id: $id) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const listEmployees = /* GraphQL */ `\n  query ListEmployees(\n    $filter: ModelEmployeeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listEmployees(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        firstName\n        lastName\n        address {\n          id\n          line1\n          line2\n          city\n          state\n          zipcode\n          empId\n        }\n        skills {\n          id\n          name\n          empId\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const getAddress = /* GraphQL */ `\n  query GetAddress($id: ID!) {\n    getAddress(id: $id) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const listAddresss = /* GraphQL */ `\n  query ListAddresss(\n    $filter: ModelAddressFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listAddresss(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSkill = /* GraphQL */ `\n  query GetSkill($id: ID!) {\n    getSkill(id: $id) {\n      id\n      name\n      empId\n    }\n  }\n`;\nexport const listSkills = /* GraphQL */ `\n  query ListSkills(\n    $filter: ModelSkillFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSkills(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        empId\n      }\n      nextToken\n    }\n  }\n`;\n","import gql from \"graphql-tag\";\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const UPDATE_ADDRESS =  gql`\nmutation updateAddress($id: ID!, $line1: String!, $line2: String!, $state: String!, $city: String!, $zipcode: String!, $empId: String!) {\n  updateAddress(\n    input: { id: $id,  line1: $line1, line2: $line2, state: $state, city: $city, zipcode: $zipcode, empId: $empId }\n  ) {\n    id\n    line1\n    line2\n    state\n    city\n    zipcode\n    empId\n  }\n}\n`;\n\nexport const UPDATE_SKILL =  gql`\nmutation updateSkill($id: ID!, $name: String!, $empId: String!) {\n  updateSkill(\n    input: { id: $id,  name: $name, empId: $empId }\n  ) {\n    id\n    name\n    empId\n  }\n}\n`;\n\nexport const UPDATE_EMPLOYEE = gql`\n  mutation updateEmployee($id: ID!, $firstName: String!, $lastName: String!) {\n    updateEmployee(\n      input: { id: $id, firstName: $firstName, lastName: $lastName }\n    ) {\n      firstName\n      lastName\n    }\n  }\n`;\n\nexport const DELETE_EMPLOYEE = gql`\n  mutation deleteEmployee($id: ID!) {\n    deleteEmployee(input: { id: $id }) {\n      id\n    }\n  }\n`;\n\nexport const DELETE_SKILL =gql`\nmutation deleteSkill($id: ID!) {\n  deleteSkill(input: { id: $id }) {\n    id\n  }\n}`;\n\nexport const DELETE_ADDRESS = gql`\nmutation deleteAddress($id: ID!) {\n  deleteAddress(input: { id: $id }) {\n    id\n  }\n}`;\n\nexport const CREATE_EMPLOYEE = gql`\n  mutation createEmployee($firstName: String!, $lastName: String!) {\n    createEmployee(input: { firstName: $firstName, lastName: $lastName }) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nexport const CREATE_ADDRESS = gql`\nmutation createAddress($line1: String!, $line2: String!, $city: String!, $state: String!, $zipcode: String!, $empId: String! ) {\n  createAddress(input: {line1: $line1, line2: $line2, city: $city, state: $state, zipcode: $zipcode, empId: $empId  }) {\n    id\n  }\n}\n`;\n\nexport const CREATE_SKILL = gql`\nmutation createSkill($name: String!, $empId: String! ) {\n  createSkill(input: {name: $name, empId: $empId  }) {\n    id\n  }\n}\n`;\n\n\nexport const createEmployee = /* GraphQL */ `\n  mutation CreateEmployee(\n    $input: CreateEmployeeInput!\n    $condition: ModelEmployeeConditionInput\n  ) {\n    createEmployee(input: $input, condition: $condition) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const updateEmployee = /* GraphQL */ `\n  mutation UpdateEmployee(\n    $input: UpdateEmployeeInput!\n    $condition: ModelEmployeeConditionInput\n  ) {\n    updateEmployee(input: $input, condition: $condition) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const deleteEmployee = /* GraphQL */ `\n  mutation DeleteEmployee(\n    $input: DeleteEmployeeInput!\n    $condition: ModelEmployeeConditionInput\n  ) {\n    deleteEmployee(input: $input, condition: $condition) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const createAddress = /* GraphQL */ `\n  mutation CreateAddress(\n    $input: CreateAddressInput!\n    $condition: ModelAddressConditionInput\n  ) {\n    createAddress(input: $input, condition: $condition) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const updateAddress = /* GraphQL */ `\n  mutation UpdateAddress(\n    $input: UpdateAddressInput!\n    $condition: ModelAddressConditionInput\n  ) {\n    updateAddress(input: $input, condition: $condition) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const deleteAddress = /* GraphQL */ `\n  mutation DeleteAddress(\n    $input: DeleteAddressInput!\n    $condition: ModelAddressConditionInput\n  ) {\n    deleteAddress(input: $input, condition: $condition) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const createSkill = /* GraphQL */ `\n  mutation CreateSkill(\n    $input: CreateSkillInput!\n    $condition: ModelSkillConditionInput\n  ) {\n    createSkill(input: $input, condition: $condition) {\n      id\n      name\n      empId\n    }\n  }\n`;\nexport const updateSkill = /* GraphQL */ `\n  mutation UpdateSkill(\n    $input: UpdateSkillInput!\n    $condition: ModelSkillConditionInput\n  ) {\n    updateSkill(input: $input, condition: $condition) {\n      id\n      name\n    }\n  }\n`;\nexport const deleteSkill = /* GraphQL */ `\n  mutation DeleteSkill(\n    $input: DeleteSkillInput!\n    $condition: ModelSkillConditionInput\n  ) {\n    deleteSkill(input: $input, condition: $condition) {\n      id\n      name\n      empId\n    }\n  }\n`;\n","import _ from \"lodash\";\n\nexport const employeesPartitioning = (emps, adds, skills) => {\n  for (const [i, e] of emps.entries()) {\n    emps[i][\"addresss\"] = [];\n    emps[i][\"skills\"] = [];\n    adds.filter(a => {\n      if (a.empId === e.id) {\n        emps[i].addresss.push(a);\n        return;\n      }\n    });\n    skills.filter(s => {\n      if (s.empId === e.id) {\n        emps[i].skills.push(s);\n        return;\n      }\n    });\n    emps[i][\"trimAddress\"] = dataTrim(\n      emps[i].addresss[0].line1,\n      emps[i].addresss.length - 1\n    );\n    emps[i][\"trimSkill\"] = dataTrim(\n      emps[i].skills[0].name,\n      emps[i].skills.length - 1\n    );\n  }\n  return emps;\n};\n\nexport const dataTrim = (label, len) => {\n  return len > 0\n    ? `${label.substring(0, 10)}... + ${len} more`\n    : `${label.substring(0, 10)} ...`;\n};\n\nexport const isValid = (data, fieldTypes) => {\n  const error = new Object(null);\n  for (const ft of fieldTypes) {\n    if (ft.type === \"STRING\") {\n      if (!data[ft.key] || data[ft.key] === \"0\") {\n        error[ft.key] = ft.key + \" should not be empty\";\n      }\n    } else if (ft.type === \"OBJECT\") {\n      if (_.isEmpty(data[ft.key])) {\n        error[ft.key] = \"Minimum one \" + ft.key + \" required\";\n      }\n    }\n  }\n  return error;\n};\n\nexport const getFilterData = (searchValue, data) => {\n  const temp = [];\n  for (const [index, d] of data.entries()) {\n    let isSplice = false;\n    if (\n      d.firstName.toLowerCase().includes(searchValue.toLowerCase()) ||\n      d.lastName.toLowerCase().includes(searchValue.toLowerCase()) ||\n      d.skills.findIndex(s => (s.name.toLowerCase()).includes(searchValue.toLowerCase())) > -1\n    ) {\n      isSplice = true;\n    }\n    if (isSplice) {\n      temp.push(d);\n    }\n  }\n  return temp;\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default function ConformationModal(props) {\n  const { isOpen, confirm, cancel, message, title } = props;\n  const handleClose = () => {\n    cancel();\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {message}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={confirm} color=\"primary\" autoFocus>\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function Spinner() {\n  return <div className=\"spinner\"><CircularProgress disableShrink /></div>;\n}","import React, { useState, useEffect } from \"react\";\nimport Header from \"../common/header\";\nimport TableViewWithAction from \"../common/tableView\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { GET_EMPLOYEES, listSkills } from \"../graphql/queries\";\nimport {\n  DELETE_ADDRESS,\n  DELETE_SKILL,\n  DELETE_EMPLOYEE\n} from \"../graphql/mutations\";\nimport { employeesPartitioning, getFilterData } from \"../commonMethods\";\nimport ConformationModal from \"../common/conformationModal\";\nimport Spinner from \"../common/spinner\";\nimport Icon from \"@material-ui/core/Icon\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\n// export const GET_EMPLOYEES = gql`\n//   query {\n//     listEmployees {\n//       items {\n//         id\n//         firstName\n//         lastName\n//       }\n//     }\n//   }\n// `;\n\nconst tableHeader = () => {\n  return [\n    { label: \"FirstName\", key: \"firstName\" },\n    { label: \"LastName\", key: \"lastName\" },\n    { label: \"Addresss\", key: \"trimAddress\" },\n    { label: \"skills\", key: \"trimSkill\" }\n  ];\n};\n\nconst tableBody = emps => {\n  return emps;\n};\n\nconst navEmpForm = history => {\n  history.push(\"/form/0\");\n};\n\nfunction Home(props) {\n  const { searchReq, searchValue } = props;\n  const history = useHistory();\n  const [state, setState] = useState({\n    isOpen: false,\n    empId: \"\",\n    index: -1,\n    deleteData: {},\n    previousSearchValue: \"\"\n  });\n  const { data, loading, error } = useQuery(GET_EMPLOYEES);\n  let modifyData = [];\n  if (data) {\n    modifyData = employeesPartitioning(\n      [...data.listEmployees.items],\n      [...data.listAddresss.items],\n      [...data.listSkills.items]\n    );\n    if (searchValue !== \"\") {\n      modifyData = getFilterData(searchValue, [...modifyData]);\n    }\n  }\n  const [deleteEmployeeMutate] = useMutation(DELETE_EMPLOYEE);\n  const [deleteAddressMutate] = useMutation(DELETE_ADDRESS);\n  const [deleteSkillMutate] = useMutation(DELETE_SKILL);\n\n  // if (state.previousSearchValue !== searchValue) {\n  //   console.log(state.previousSearchValue, searchValue);\n  //   setState({...state, previousSearchValue: searchValue});\n  //   const res = useQuery(GET_EMPLOYEES)\n  // }\n\n  useEffect(() => {\n    searchReq(true);\n  }, []);\n\n  const editEmp = empId => {\n    history.push(`/form/${empId}`);\n  };\n\n  const deleteSkills = async skillIds => {\n    for (const s of skillIds) {\n      const data = await deleteSkillMutate({\n        variables: { id: s }\n      });\n    }\n  };\n\n  const deleteAddresss = async addressIds => {\n    for (const a of addressIds) {\n      const data = await deleteAddressMutate({\n        variables: { id: a }\n      });\n    }\n  };\n\n  const deleteEmp = async () => {\n    const skillIds = state.deleteData.skills.map(s => s.id);\n    const addressIds = state.deleteData.addresss.map(a => a.id);\n    await deleteAddresss(addressIds);\n    await deleteSkills(skillIds);\n    await deleteEmployeeMutate({\n      variables: { id: state.empId },\n      refetchQueries: [\n        {\n          query: GET_EMPLOYEES\n        }\n      ]\n    });\n    setState({ isOpen: false, empId: \"\", index: -1, deleteData: {} });\n  };\n\n  const confirmationAgree = () => {\n    deleteEmp();\n  };\n\n  const openModal = (empId, deleteEmployeeMutate, index, deleteData) => {\n    state.isOpen = true;\n    state.deleteData = deleteData;\n    state.index = index;\n    state.empId = empId;\n    setState({ ...state });\n  };\n\n  const closeModal = () => {\n    setState({ isOpen: false, empId: \"\", index: -1, deleteData: {} });\n  };\n\n  const specifyEmpDetails = empId => {\n    history.push(`/employee/${empId}`);\n  };\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {/* <Header addNew={navEmpForm()} label={\"EmployeeList\"} /> */}\n      <div className=\"pl30 pr30 pt30\">\n        {!loading ? (\n          <TableViewWithAction\n            bodyData={tableBody(modifyData)}\n            heading={tableHeader()}\n            deleteMutate={deleteEmployeeMutate}\n            edit={editEmp}\n            isAction={true}\n            del={openModal}\n            routerLink={specifyEmpDetails}\n          />\n        ) : (\n          \"Data not found\"\n        )}\n      </div>\n      <div\n        className=\"addIconBtn\"\n        title={\"Add new\"}\n        onClick={() => navEmpForm(history)}\n      >\n        <div className=\"roundIcon\">\n          <AddIcon style={{ color: \"white\" }} />\n        </div>\n      </div>\n      <ConformationModal\n        title={\"Conformation\"}\n        message={\"Do you want delete this employee ?\"}\n        isOpen={state.isOpen}\n        confirm={confirmationAgree}\n        cancel={closeModal}\n      />\n    </>\n  );\n}\n\nexport default Home;\n","export const empValidationFields = [\n    {type: 'STRING',key: 'firstName'},\n    {type: 'STRING',key: 'lastName'},\n    {type: 'OBJECT',key: 'skills'},\n    {type: 'OBJECT',key: 'addresss'}\n];\n\nexport const addressValidationFields = [\n    {type: 'STRING',key: 'line1'},\n    {type: 'STRING',key: 'line2'},\n    {type: 'STRING',key: 'zipcode'},\n    {type: 'STRING',key: 'city'},\n    {type: 'STRING',key: 'state'}\n];\n\nexport const skillValidationFields = [\n    {type: 'STRING',key: 'name'}\n];","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport TableViewWithAction from \"./tableView\";\nimport { addressValidationFields } from \"../validationFieldTypes\";\nimport { isValid } from \"../commonMethods\";\nimport * as _ from \"lodash\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nexport const cities = [\n  { id: \"1\", name: \"Chennai\", stateId: \"1\" },\n  { id: \"2\", name: \"Trichy\", stateId: \"1\" },\n  { id: \"3\", name: \"Karaikudi\", stateId: \"1\" },\n  { id: \"4\", name: \"Visagapattinam\", stateId: \"2\" },\n  { id: \"5\", name: \"Vijayavada\", stateId: \"2\" }\n];\nexport const states = [\n  { id: \"1\", name: \"TamilNadu\" },\n  { id: \"2\", name: \"Andra Pradesh\" }\n];\n\nconst tableHeader = () => {\n  return [\n    { label: \"Line 1\", key: \"line1\" },\n    { label: \"Line2\", key: \"line2\" },\n    { label: \"City\", key: \"cityName\" },\n    { label: \"State\", key: \"stateName\" },\n    { label: \"Zipcode\", key: \"zipcode\" }\n  ];\n};\nconst handleStateChange = (value, setState, state) => {\n  state.cities = cities.filter(c => c.stateId === value);\n  state.form.state = value;\n  setState({ ...state });\n};\n\nconst add = (setState, state, addresss, ancestorSetState) => {\n  if (_.isEmpty(isValid(state.form, addressValidationFields))) {\n    state.form[\"cityName\"] = cities.find(c => c.id === state.form.city).name;\n    state.form[\"stateName\"] = states.find(s => s.id === state.form.state).name;\n    if (state.editIndex < 0) {\n      addresss.push({ ...state.form });\n    } else {\n      addresss[state.editIndex] = { ...state.form };\n    }\n    ancestorSetState(addresss);\n    setState({\n      cities: [],\n      editIndex: -1,\n      form: { line1: \"\", line2: \"\", zipcode: \"\", city: \"\", state: \"\" }\n    });\n  }\n};\n\nconst locationNameCon = data => {\n  data.map(d => {\n    d[\"stateName\"] = states.find(s => s.id === d.state).name;\n    d[\"cityName\"] = cities.find(c => c.id === d.city).name;\n  });\n};\n\nfunction AddresssForm(props) {\n  const [state, setData] = useState({\n    form: { line1: \"\", line2: \"\", zipcode: \"\", city: \"\", state: \"\" },\n    cities: [],\n    editIndex: -1\n  });\n  const { addresss, ancestorSetState, collectDelId } = props;\n  if (addresss) {\n    locationNameCon(addresss);\n  }\n  const classes = useStyles();\n  const edit = (dataId, index) => {\n    state.cities = cities.filter(c => c.stateId === addresss[index].state);\n    state.form = addresss[index];\n    state.editIndex = index;\n    setData({ ...state });\n  };\n\n  const del = (id, deleteMut, index) => {\n    if (id) {\n      collectDelId(id);\n    }\n    addresss.splice(index, 1);\n  };\n\n  const zipcodeHandler = (value) => {\n    if(!isNaN(value)) {\n      if(value.length < 7) {\n        setData({\n          ...state,\n          form: { ...state.form, zipcode: value }\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardHeader title=\"Address\" />\n        <CardContent>\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <Grid container spacing={3}>\n              <Grid item xs={4}>\n                <TextField\n                  required\n                  label=\"Line1\"\n                  style={{ width: \"95%\" }}\n                  onChange={e =>\n                    setData({\n                      ...state,\n                      form: { ...state.form, line1: e.target.value }\n                    })\n                  }\n                  value={state.form.line1}\n                  variant=\"filled\"\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  required\n                  label=\"Line2\"\n                  style={{ width: \"95%\" }}\n                  onChange={e =>\n                    setData({\n                      ...state,\n                      form: { ...state.form, line2: e.target.value }\n                    })\n                  }\n                  value={state.form.line2}\n                  variant=\"filled\"\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  id=\"filled-select-currency-native\"\n                  select\n                  label=\"State\"\n                  value={state.form.state}\n                  onChange={e =>\n                    handleStateChange(e.target.value, setData, state)\n                  }\n                  helperText=\"\"\n                  variant=\"filled\"\n                >\n                  {states.map(s => (\n                    <option value={s.id} key={s.id}>\n                      {s.name}\n                    </option>\n                  ))}\n                </TextField>\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <TextField\n                  id=\"filled-select-currency-native\"\n                  select\n                  label=\"City\"\n                  value={state.form.city}\n                  onChange={e =>\n                    setData({\n                      ...state,\n                      form: { ...state.form, city: e.target.value }\n                    })\n                  }\n                  helperText=\"\"\n                  variant=\"filled\"\n                >\n                  {state.cities.map(c => (\n                    <option value={c.id} key={c.id}>\n                      {c.name}\n                    </option>\n                  ))}\n                </TextField>\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  required\n                  label=\"Zipcode\"\n                  style={{ width: \"100%\" }}\n                  value={state.form.zipcode}\n                  onChange={e => zipcodeHandler(e.target.value)}\n                  variant=\"filled\"\n                  helperText=\"Its number field and don't exsist six digit\"\n                />\n              </Grid>\n            </Grid>\n          </form>\n        </CardContent>\n        <CardActions className=\"right\" style={{ marginRight: \"22px\" }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => add(setData, state, addresss, ancestorSetState)}\n          >\n            {\"Add\"}\n          </Button>\n        </CardActions>\n        <CardContent>\n          {addresss && !_.isEmpty(addresss) && (\n            <TableViewWithAction\n              bodyData={addresss}\n              heading={tableHeader()}\n              edit={edit}\n              isAction={true}\n              del={del}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n\nexport default AddresssForm;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Draggable from \"react-draggable\";\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nexport default function DraggableModal(props) {\n  const [open, setOpen] = React.useState(false);\n  const { isOpen, errors, close } = props;\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    close();\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        PaperComponent={PaperComponent}\n        aria-labelledby=\"draggable-dialog-title\"\n      >\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\n          Error..!\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {\n                Object.keys(errors).map((key,index) => <div key={index}>{index +1+ \". \"+  errors[key]  }</div>)\n            }\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Ok\n          </Button>\n          {/* <Button onClick={handleClose} color=\"primary\">\n            Subscribe\n          </Button> */}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst keyPress = (name, e, ancestorStateChange, state, setValue) => {\n  if (e.keyCode == 13) {\n    if (e.target.value !== \"\") {\n      const temp = [...state.form.skills];\n      temp.push({ name: e.target.value });\n      setValue(\"\");\n      ancestorStateChange(name, temp, undefined);\n    }\n  }\n};\n\nconst handleDelete = (name, chips, index, ancestorStateChange) => {\n  const id = chips[index].id;\n  chips.splice(index, 1);\n  ancestorStateChange(name, [...chips], id);\n};\n\nfunction MultiSelectTextField(props) {\n  const [value, setValue] = useState(\"\");\n  const { fieldKey, ancestorStateChange, state, chips } = props;\n  return (\n    <>\n      <div>\n        <TextField\n          required\n          label=\"Skills\"\n          onChange={e => setValue(e.target.value)}\n          onKeyDown={e =>\n            keyPress(fieldKey, e, ancestorStateChange, state, setValue)\n          }\n          value={value}\n          variant=\"filled\"\n        />\n        <div>\n          {chips.map((c, index) => (\n            <Chip\n              // avatar={<Avatar alt=\"Natacha\" src=\"/static/images/avatar/1.jpg\" />}\n              key={index}\n              label={c.name}\n              onDelete={e =>\n                handleDelete(e, [...chips], index, ancestorStateChange)\n              }\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MultiSelectTextField;\n","import React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport Button from \"@material-ui/core/Button\";\nimport gql from \"graphql-tag\";\nimport { useHistory } from \"react-router-dom\";\nimport { GET_EMPLOYEES, GET_EMPLOYEE_BY_ID } from \"../graphql/queries\";\nimport _ from \"lodash\";\nimport AddresssForm from \"../common/addressForm\";\nimport Spinner from \"../common/spinner\";\nimport DraggableModal from \"../common/draggableModal\";\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport {\n  CREATE_EMPLOYEE,\n  CREATE_ADDRESS,\n  CREATE_SKILL,\n  UPDATE_EMPLOYEE,\n  DELETE_ADDRESS,\n  DELETE_SKILL,\n  UPDATE_ADDRESS,\n  UPDATE_SKILL\n} from \"../graphql/mutations\";\nimport Header from \"../common/header\";\nimport MultiSelectTextField from \"../common/multiSelectText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { employeesPartitioning, isValid } from \"../commonMethods\";\nimport { empValidationFields } from \"../validationFieldTypes\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    }\n  },\n  minWidth: 275,\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n}));\n\nconst createEmp = async (firstName, lastName, createEmployeeMutate) => {\n  const { data } = await createEmployeeMutate({\n    variables: { firstName, lastName }\n  });\n  return data.createEmployee.id;\n};\n\nconst createAddresss = async (addresss, createAddressMutate) => {\n  for (const a of addresss) {\n    const data = await createAddressMutate({\n      variables: {\n        line1: a.line1,\n        line2: a.line2,\n        city: a.city,\n        state: a.state,\n        zipcode: a.zipcode,\n        empId: a.empId\n      }\n    });\n  }\n};\n\nconst createSkills = async (skills, createSkillMutate) => {\n  for (const s of skills) {\n    const data = await createSkillMutate({\n      variables: { name: s.name, empId: s.empId },\n      refetchQueries: [\n        {\n          query: GET_EMPLOYEES\n        }\n      ]\n    });\n  }\n};\n\nconst createAddressAndSkill = (\n  data,\n  createAddressMutate,\n  createSkillMutate,\n  form\n) => {\n  if (data.createEmployee.id) {\n    form.addresss.map(a => {\n      a[\"empId\"] = data.createEmployee.id;\n    });\n    form.skills.map(s => {\n      s[\"empId\"] = data.createEmployee.id;\n    });\n    createAddresss(form.addresss, createAddressMutate);\n    createSkills(form.skills, createSkillMutate);\n  }\n};\n\nconst save = async (state, createEmployeeMutate, history, setStateData) => {\n  if (_.isEmpty(isValid(state.form, empValidationFields))) {\n    await createEmp(\n      state.form.firstName,\n      state.form.lastName,\n      createEmployeeMutate\n    );\n    history.push(\"/home\");\n  } else {\n    const errors = isValid(state.form, empValidationFields);\n    setStateData({ ...state, errors, isErrorModal: true });\n  }\n};\n\nconst handleFormChange = (name, value, setStateData, state) => {\n  setStateData({ ...state, form: { ...state.form, [name]: value } });\n};\n\nconst handleChange = (name, value, setStateData, state) => {\n  setStateData({ ...state, [name]: value });\n};\n\nfunction Empform(props) {\n  const {searchReq} = props;\n  const history = useHistory();\n  const [state, setStateData] = useState({\n    skill: \"\",\n    isErrorModal: false,\n    errors: {},\n    delAddressIds: [],\n    delSkillIds: [],\n    form: {\n      firstName: \"\",\n      lastName: \"\",\n      address: [],\n      skills: []\n    }\n  });\n  const { data, loading } = useQuery(GET_EMPLOYEE_BY_ID, {\n    variables: { id: props.match.params.empId, empId: props.match.params.empId }\n  });\n  const [createEmployeeMutate, { error }] = useMutation(CREATE_EMPLOYEE, {\n    onCompleted: data =>\n      createAddressAndSkill(\n        data,\n        createAddressMutate,\n        createSkillMutate,\n        state.form\n      )\n  });\n  const [createAddressMutate] = useMutation(CREATE_ADDRESS);\n  const [createSkillMutate] = useMutation(CREATE_SKILL);\n  const [updateEmployeeMutate] = useMutation(UPDATE_EMPLOYEE);\n  const [updateAddressMutate] = useMutation(UPDATE_ADDRESS);\n  const [updateSkillMutate] = useMutation(UPDATE_SKILL);\n  const [deleteAddressMutate] = useMutation(DELETE_ADDRESS);\n  const [deleteSkillMutate] = useMutation(DELETE_SKILL);\n  const classes = useStyles();\n\n  const formSkillsChange = (name, value, skillId) => {\n    if (skillId) {\n      state.delSkillIds.push(skillId);\n      state.form.skills = value;\n      setStateData({ ...state });\n    } else {\n      setStateData({ ...state, form: { ...state.form, [name]: value } });\n    }\n  };\n\n  useEffect(() => {\n    if (data) {\n      if (data.getEmployee) {\n        setStateData({\n          ...state,\n          form: employeesPartitioning(\n            [{ ...data.getEmployee }],\n            [...data.listAddresss.items],\n            [...data.listSkills.items]\n          )[0]\n        });\n      }\n    }\n    searchReq(false);\n  }, [data]);\n\n  const addresssStateChange = addresss => {\n    setStateData({ ...state, form: { ...state.form, addresss } });\n  };\n\n  const collectDelId = id => {\n    state.delAddressIds.push(id);\n    setStateData({ ...state, delAddressIds: state.delAddressIds });\n  };\n\n  const Update = async () => {\n    if (_.isEmpty(isValid(state.form, empValidationFields))) {\n      if (props.match.params.empId && props.match.params.empId !== \"0\") {\n        if (!_.isEmpty(state.delSkillIds)) {\n          for (const s of state.delSkillIds) {\n            const data = await deleteSkillMutate({\n              variables: { id: s }\n            });\n          }\n        }\n        if (!_.isEmpty(state.delAddressIds)) {\n          for (const a of state.delAddressIds) {\n            const data = await deleteAddressMutate({\n              variables: { id: a }\n            });\n          }\n        }\n        for (const a of state.form.addresss) {\n          if (a.id) {\n            console.log(a);\n            await updateAddressMutate({\n              variables: {\n                id: a.id,\n                line1: a.line1,\n                line2: a.line2,\n                state: a.state,\n                city: a.city,\n                zipcode: a.zipcode,\n                empId: props.match.params.empId\n              }\n            });\n          } else {\n            await createAddressMutate({\n              variables: {\n                line1: a.line1,\n                line2: a.line2,\n                city: a.city,\n                state: a.state,\n                zipcode: a.zipcode,\n                empId: props.match.params.empId\n              }\n            });\n          }\n        }\n        for (const s of state.form.skills) {\n          if (s.id) {\n            await updateSkillMutate({\n              variables: {\n                id: s.id,\n                name: s.name,\n                empId: props.match.params.empId\n              }\n            });\n          } else {\n            await createSkillMutate({\n              variables: {\n                name: s.name,\n                empId: props.match.params.empId\n              }\n            });\n          }\n        }\n        await updateEmployeeMutate({\n          variables: {\n            id: props.match.params.empId,\n            firstName: state.form.firstName,\n            lastName: state.form.lastName\n          },\n          refetchQueries: [\n            {\n              query: GET_EMPLOYEES\n            }\n          ]\n        });\n        history.push(\"/home\");\n      }\n    }\n  };\n\n  const errorModalClose = () => {\n    setStateData({ ...state, errors: {}, isErrorModal: false });\n  };\n  \n  const navEmpList = () => {\n      history.push('/');\n  }\n\n  // searchReq(false);\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {/* <Header label={\"Employee Form\"} /> */}\n      <div className=\"ml9rem mr9rem mt40\">\n        <Card className={classes.root}>\n          <CardContent>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs={4}>\n                    <TextField\n                      required\n                      id=\"standard-required\"\n                      label=\"FirstName\"\n                      onChange={e =>\n                        handleFormChange(\n                          \"firstName\",\n                          e.target.value,\n                          setStateData,\n                          state\n                        )\n                      }\n                      value={state.form.firstName}\n                      variant=\"filled\"\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <TextField\n                      required\n                      id=\"standard-required\"\n                      label=\"LastName\"\n                      onChange={e =>\n                        handleFormChange(\n                          \"lastName\",\n                          e.target.value,\n                          setStateData,\n                          state\n                        )\n                      }\n                      value={state.form.lastName}\n                      variant=\"filled\"\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <MultiSelectTextField\n                      fieldKey={\"skills\"}\n                      ancestorStateChange={formSkillsChange}\n                      state={state}\n                      chips={state.form.skills}\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n              <div className=\"mt30\">\n                <AddresssForm\n                  ancestorSetState={addresssStateChange}\n                  addresss={state.form.addresss ? state.form.addresss : []}\n                  collectDelId={collectDelId}\n                />\n              </div>\n            </form>\n          </CardContent>\n          <CardActions className=\"right\">\n            {props.match.params.empId !== \"0\" && props.match.params.empId ? (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => Update()}\n              >\n                Update\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() =>\n                  save(state, createEmployeeMutate, history, setStateData)\n                }\n              >\n                Save\n              </Button>\n            )}\n          </CardActions>\n        </Card>\n      </div>\n      <DraggableModal\n        isOpen={state.isErrorModal}\n        errors={state.errors}\n        close={errorModalClose}\n      />\n      <div className=\"addIconBtn\" title={\"Add new\"} onClick={() => navEmpList(history)}>\n        <div className=\"roundIcon\"><ViewListIcon style={{color: 'white'}} /></div>\n      </div>\n    </>\n  );\n}\n\nexport default Empform;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { GET_EMPLOYEES, GET_EMPLOYEE_BY_ID } from \"../graphql/queries\";\nimport _ from \"lodash\";\nimport Spinner from \"../common/spinner\";\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport {cities, states} from '../common/addressForm';\n\nconst fakeData = {\n  firstName: \"sathish\",\n  lastName: \"kumar\",\n  addresss: [\n    {\n      line1: \"9th cross\",\n      line2: \"nethaji street\",\n      zipcode: \"600042\",\n      city: \"1\",\n      state: \"1\"\n    }\n  ],\n  skills: [{ name: \"reactjs\" }]\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    }\n  },\n  minWidth: 275,\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n}));\n\nfunction Empdetails(props) {\n  const {searchReq} = props;\n  const history = useHistory();\n  const { data, loading } = useQuery(GET_EMPLOYEE_BY_ID, {\n    variables: { id: props.match.params.empId, empId: props.match.params.empId }\n  });\n  \n  // searchReq(false);\n  const classes = useStyles();\n  const navEmpList = () => {\n      history.push('/');\n  }\n\n  useEffect(()=>{\n    searchReq(false);\n  }, []);\n\n  return (\n    <>\n      {loading && <Spinner />}\n      {/* <Header label={\"Employee Form\"} /> */}\n      {data && data.getEmployee && (\n        <div className=\"ml9rem mr9rem mt40\">\n          <Card className={classes.root}>\n            <CardHeader title=\"Employee Details\">\n              <span className=\"right\">edit</span>\n            </CardHeader>\n            <CardContent>\n              <table className=\"mb20\">\n                <tr>\n                  <td className=\"leftLabel\">First Name</td>\n                  <td >:</td>\n                  <td>{data.getEmployee.firstName}</td>\n                </tr>\n                <tr>\n                  <td className=\"leftLabel\">Last Name</td>\n                  <td>:</td>\n                  <td>{data.getEmployee.lastName}</td>\n                </tr>\n                <tr>\n                <td className=\"leftLabel\">Skills</td>\n                  <td>:</td>\n                  <td>\n                      {\n                      data.listSkills.items.map((s, index) => index === data.listSkills.items.length-1? s.name : s.name + ', ')\n                      }\n                      </td>\n                </tr>\n              </table>\n              <Card className={classes.root}>\n                <CardHeader title=\"Addresss\">\n                  <span className=\"right\">edit</span>\n                </CardHeader>\n                <CardContent>\n                  {data.listAddresss.items.map((a, index) => (\n                    <div key={index} className=\"mb20\">\n                      <table>\n                        <tr>\n                          <td className=\"leftLabel\">Line 1</td>\n                          <td>:</td>\n                          <td>{a.line1}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"leftLabel\">Line 2</td>\n                          <td>:</td>\n                          <td>{a.line2}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"leftLabel\">City</td>\n                          <td>:</td>\n                          <td>{cities.find(c=> c.id === a.city).name}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"leftLabel\">State</td>\n                          <td>:</td>\n                          <td>{states.find(s=>s.id === a.state).name}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"leftLabel\">Zipcode</td>\n                          <td>:</td>\n                          <td>{a.zipcode}</td>\n                        </tr>\n                      </table>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </CardContent>\n            <CardActions></CardActions>\n          </Card>\n        </div>\n      )}\n      <div className=\"addIconBtn\" title={\"Add new\"} onClick={() => navEmpList(history)}>\n        <div className=\"roundIcon\"><ViewListIcon style={{color: 'white'}} /></div>\n      </div>\n    </>\n  );\n}\n\nexport default Empdetails;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DirectionsIcon from '@material-ui/icons/Directions';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 300,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nexport default function SearchField(props) {\n  const classes = useStyles();\n  const {searchHandler} = props;\n  const handleChange = (e) => {\n    searchHandler(e.target.value);\n  }\n\n  const startSearch = (e) => {\n      if (e.keyCode === 13) {\n          console.log(e.keyCode);\n      }\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Search firstname, lastname, skills\"\n        inputProps={{ 'aria-label': 'search google maps' }}\n        onChange = { (e) => handleChange(e)}\n        onKeyDown = {(e) => startSearch(e)}\n      />\n      <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n        <SearchIcon />\n      </IconButton>\n      </Paper>\n  );\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./home\";\nimport Empform from \"./empform\";\nimport Empdetails from \"./empdetails\";\nimport { useQuery } from \"react-apollo\";\nimport { GET_EMPLOYEES } from \"../graphql/queries\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport SearchField from \"../common/searchField\";\nimport NotFound from './pageNotFound';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n}));\n\nexport default function Layout(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  let sideMenus = [];\n  const { data, loading, error } = useQuery(GET_EMPLOYEES);\n  if (data) {\n    sideMenus = data.listEmployees.items;\n  }\n  const [state, setState] = React.useState({\n    isDrawer: false,\n    searchValue: \"\",\n    isSearchReq: false\n  });\n\n  const handleDrawerOpen = () => {\n    setState({ ...state, isDrawer: true });\n  };\n\n  const handleDrawerClose = () => {\n    setState({ ...state, isDrawer: false });\n  };\n\n  const searchHandler = value => {\n    setState({ ...state, searchValue: value });\n  };\n\n  const searchReq = bool => {\n    setState({ ...state, isSearchReq: bool });\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar\n            position=\"fixed\"\n            className={clsx(classes.appBar, {\n              [classes.appBarShift]: state.isDrawer\n            })}\n          >\n            <div className=\"relative\">\n              <Toolbar>\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"open drawer\"\n                  onClick={handleDrawerOpen}\n                  edge=\"start\"\n                  className={clsx(\n                    classes.menuButton,\n                    state.isDrawer && classes.hide\n                  )}\n                >\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" noWrap>\n                  Employee\n                </Typography>\n              </Toolbar>\n              { state.isSearchReq &&\n                <div className=\"searchField\">\n                  <SearchField searchHandler={searchHandler} searchValue= {state.searchValue}/>\n                </div>\n              }\n            </div>\n          </AppBar>\n          <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"left\"\n            open={state.isDrawer}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n          >\n            <div className={classes.drawerHeader}>\n              <IconButton onClick={handleDrawerClose}>\n                {theme.direction === \"ltr\" ? (\n                  <ChevronLeftIcon />\n                ) : (\n                  <ChevronRightIcon />\n                )}\n              </IconButton>\n            </div>\n            <List>\n              {sideMenus.map((emp, index) => (\n                <Link to={`/employee/${emp.id}`}>\n                  <ListItem button key={emp.firstName + emp.lastName}>\n                    <ListItemIcon>\n                      {index % 2 === 0 ? <AccountCircleIcon /> : <FaceIcon />}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={emp.firstName + \" \" + emp.lastName}\n                    />\n                  </ListItem>\n                </Link>\n              ))}\n            </List>\n          </Drawer>\n          <main\n            className={clsx(classes.content, {\n              [classes.contentShift]: state.isDrawer\n            })}\n          >\n            <div className={classes.drawerHeader} />\n            <Route\n              path=\"/form/:empId\"\n              render={props => <Empform {...props} searchReq={searchReq} />}\n            ></Route>\n            <Route\n              path=\"/employee/:empId\"\n              render={props => <Empdetails {...props} searchReq={searchReq} />}\n            ></Route>\n            <Route exact  path=\"/\">\n              <Home client={props.client} searchReq={searchReq} searchValue={state.searchValue}/>\n            </Route>\n          </main>\n        </div>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Query } from \"react-apollo\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Layout from './pages/layout';\n// import { createBrowserHistory } from \"history\";\n// const emps = await API.graphql(graphqlOperation(query));\n\n // const history = createBrowserHistory();\n\nfunction App(props) {\n  return (\n            <Layout  {...props}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-west-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://3kqa2bt5qzg6rkbbgsuorywybq.appsync-api.us-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-west-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-swaqwisp65e3nhnyu2swagorde\"\n};\n\n\nexport default awsmobile;\n","import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Amplify from \"aws-amplify\";\nimport config from \"./aws-exports\";\nimport gql from \"graphql-tag\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri:\n    \"https://3kqa2bt5qzg6rkbbgsuorywybq.appsync-api.us-west-2.amazonaws.com/graphql\",\n  headers: {\n    \"X-Api-Key\": \"da2-swaqwisp65e3nhnyu2swagorde\"\n  }\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer da2-swaqwisp65e3nhnyu2swagorde`\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  cache,\n  link: authLink.concat(httpLink)\n});\n\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <ApolloProvider client= {client}>\n    <App client={client}/>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}