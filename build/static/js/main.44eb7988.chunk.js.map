{"version":3,"sources":["common/header.js","common/tableView.js","graphql/queries.js","graphql/mutations.js","commonMethods.js","common/conformationModal.js","common/spinner.js","pages/home.js","validationFieldTypes.js","common/addressForm.js","common/multiSelectText.js","pages/empform.js","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","addNew","textDecoration","color","Header","props","classes","label","className","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","Button","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","background","default","TableRow","table","minWidth","margin","TableViewWithAction","isAction","heading","bodyData","edit","del","deleteMutate","TableContainer","component","Paper","Table","TableHead","map","item","index","key","length","TableBody","bData","h","scope","onClick","id","style","marginLeft","GET_EMPLOYEE_BY_ID","gql","GET_EMPLOYEES","UPDATE_ADDRESS","UPDATE_SKILL","UPDATE_EMPLOYEE","DELETE_EMPLOYEE","DELETE_SKILL","DELETE_ADDRESS","CREATE_EMPLOYEE","CREATE_ADDRESS","CREATE_SKILL","employeesPartitioning","emps","adds","skills","i","e","filter","a","empId","addresss","push","s","dataTrim","line1","name","entries","len","substring","isValid","data","fieldTypes","error","Object","ft","type","_","isEmpty","ConformationModal","isOpen","confirm","cancel","message","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","Spinner","CircularProgress","disableShrink","Home","history","useHistory","useState","deleteData","state","setState","useQuery","loading","modifyData","listEmployees","items","listAddresss","listSkills","useMutation","deleteEmployeeMutate","deleteAddressMutate","deleteSkillMutate","deleteSkills","skillIds","variables","deleteAddresss","addressIds","deleteEmp","refetchQueries","query","to","empValidationFields","addressValidationFields","width","typography","pxToRem","fontWeight","fontWeightRegular","formControl","selectEmpty","marginTop","cities","stateId","states","AddresssForm","form","line2","zipcode","city","editIndex","setData","ancestorSetState","collectDelId","d","find","c","Card","CardHeader","CardContent","noValidate","autoComplete","Grid","container","xs","TextField","required","onChange","target","value","FormControl","InputLabel","Select","labelId","handleStateChange","MenuItem","CardActions","add","dataId","deleteMut","splice","MultiSelectTextField","setValue","fieldKey","ancestorStateChange","chips","onKeyDown","keyCode","temp","undefined","keyPress","Chip","onDelete","handleDelete","pos","marginBottom","createEmp","firstName","lastName","createEmployeeMutate","createEmployee","createAddresss","createAddressMutate","createSkills","createSkillMutate","save","updateEmployeeMutate","delSkillIds","delAddressIds","handleFormChange","setStateData","Empform","skill","address","match","params","onCompleted","createAddressAndSkill","updateAddressMutate","updateSkillMutate","useEffect","getEmployee","Update","console","log","skillId","App","path","render","client","Boolean","window","location","hostname","awsmobile","cache","InMemoryCache","httpLink","HttpLink","uri","headers","authLink","setContext","authorization","ApolloClient","link","concat","Amplify","configure","config","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44eb7988.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  addNew: {\n    textDecoration: 'none',\n    color: 'white'\n  }\n}));\n\nexport default function Header(props) {\n  const classes = useStyles();\n  const {addNew, label} = props;\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <Typography variant=\"h6\" className={classes.title}>\n              {label}\n          </Typography>\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n          </Typography>\n          {\n            addNew && <Button color=\"inherit\">{addNew}</Button>\n          }\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Box from \"@material-ui/core/Box\";\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n}))(TableRow);\n\n// function createData(data, keys) {\n//   data.filter(d => {\n//     const temp = {}\n//     keys.filter(k => { temp[k] = d[key]; return ;});\n//   });\n//   return data.map(d => d)\n//   return { firstName, lastName, address, skill, id};\n// }\n\n// const rows = (data, heading) => {\n//   return  createData(data, [...heading.map(item => item.key, 'id')]);\n//   //  createData(item[heading[0].key], item[heading[1].key], item[heading[2].key], item[heading[3].key], item['id'])\n//   // );\n// };\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n    minWidth: 700\n  },\n  margin: {\n    margin: theme.spacing(-1.8)\n  }\n}));\n\nexport default function TableViewWithAction(props) {\n  const classes = useStyles();\n  const { isAction, heading, bodyData, edit, del, deleteMutate } = props;\n  // console.log(rows(bodyData, heading));\n  // console.log(bodyData);\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            {heading.map((item, index) => (\n              <StyledTableCell key={index}>{item.label}</StyledTableCell>\n            ))}\n            {isAction ? (\n              <>\n                <StyledTableCell key={heading.length}>Actions</StyledTableCell>\n              </>\n            ) : null}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {bodyData.map((bData, index) => (\n            <StyledTableRow key={index}>\n              {props.heading.map((h, index) => (\n                <StyledTableCell component=\"th\" scope=\"row\" key={index}>\n                  {bData[h.key]}\n                </StyledTableCell>\n              ))}\n              {isAction ? (\n                <>\n                  <StyledTableCell component=\"th\" scope=\"row\">\n                    <span>\n                      <IconButton\n                        aria-label=\"delete\"\n                        className={classes.margin}\n                        onClick={() => edit(bData.id, index)}\n                      >\n                        <EditIcon fontSize=\"small\" />\n                      </IconButton>\n                    </span>\n                    <span style={{ marginLeft: \"25px\" }}>\n                      <IconButton\n                        aria-label=\"delete\"\n                        className={classes.margin}\n                        onClick={() => del(bData.id, deleteMutate, index, bData)}\n                      >\n                        <DeleteIcon fontSize=\"small\" />\n                      </IconButton>\n                    </span>\n                  </StyledTableCell>\n                </>\n              ) : null}\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import gql from \"graphql-tag\";\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const GET_EMPLOYEE_BY_ID = gql`\n  query empById($id: ID!, $empId: String) {\n    getEmployee(id: $id) {\n      id\n      firstName\n      lastName\n    }\n    listAddresss(filter: {\n      empId:{contains: $empId}\n    }) {\n      items {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n    }\n    listSkills(filter: {\n      empId:{contains: $empId}\n    }) {\n      items {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\n\nexport const GET_EMPLOYEES = gql`\n  query {\n    listEmployees {\n      items {\n        id\n        firstName\n        lastName\n      }\n    }\n    listAddresss {\n      items {\n        id\n        line1\n        line2\n        zipcode\n        state\n        city\n        empId\n      }\n    }\n    listSkills {\n      items {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\n\nexport const getEmployee = /* GraphQL */ `\n  query GetEmployee($id: ID!) {\n    getEmployee(id: $id) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const listEmployees = /* GraphQL */ `\n  query ListEmployees(\n    $filter: ModelEmployeeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listEmployees(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        firstName\n        lastName\n        address {\n          id\n          line1\n          line2\n          city\n          state\n          zipcode\n          empId\n        }\n        skills {\n          id\n          name\n          empId\n        }\n      }\n      nextToken\n    }\n  }\n`;\nexport const getAddress = /* GraphQL */ `\n  query GetAddress($id: ID!) {\n    getAddress(id: $id) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const listAddresss = /* GraphQL */ `\n  query ListAddresss(\n    $filter: ModelAddressFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listAddresss(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      nextToken\n    }\n  }\n`;\nexport const getSkill = /* GraphQL */ `\n  query GetSkill($id: ID!) {\n    getSkill(id: $id) {\n      id\n      name\n      empId\n    }\n  }\n`;\nexport const listSkills = /* GraphQL */ `\n  query ListSkills(\n    $filter: ModelSkillFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listSkills(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        empId\n      }\n      nextToken\n    }\n  }\n`;\n","import gql from \"graphql-tag\";\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const UPDATE_ADDRESS =  gql`\nmutation updateAddress($id: ID!, $line1: String!, $line2: String!, $state: String!, $city: String!, $zipcode: String!, $empId: String!) {\n  updateAddress(\n    input: { id: $id,  line1: $line1, line2: $line2, state: $state, city: $city, zipcode: $zipcode, empId: $empId }\n  ) {\n    id\n    line1\n    line2\n    state\n    city\n    zipcode\n    empId\n  }\n}\n`;\n\nexport const UPDATE_SKILL =  gql`\nmutation updateSkill($id: ID!, $name: String!, $empId: String!) {\n  updateSkill(\n    input: { id: $id,  name: $name, empId: $empId }\n  ) {\n    id\n    name\n    empId\n  }\n}\n`;\n\nexport const UPDATE_EMPLOYEE = gql`\n  mutation updateEmployee($id: ID!, $firstName: String!, $lastName: String!) {\n    updateEmployee(\n      input: { id: $id, firstName: $firstName, lastName: $lastName }\n    ) {\n      firstName\n      lastName\n    }\n  }\n`;\n\nexport const DELETE_EMPLOYEE = gql`\n  mutation deleteEmployee($id: ID!) {\n    deleteEmployee(input: { id: $id }) {\n      id\n    }\n  }\n`;\n\nexport const DELETE_SKILL =gql`\nmutation deleteSkill($id: ID!) {\n  deleteSkill(input: { id: $id }) {\n    id\n  }\n}`;\n\nexport const DELETE_ADDRESS = gql`\nmutation deleteAddress($id: ID!) {\n  deleteAddress(input: { id: $id }) {\n    id\n  }\n}`;\n\nexport const CREATE_EMPLOYEE = gql`\n  mutation createEmployee($firstName: String!, $lastName: String!) {\n    createEmployee(input: { firstName: $firstName, lastName: $lastName }) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nexport const CREATE_ADDRESS = gql`\nmutation createAddress($line1: String!, $line2: String!, $city: String!, $state: String!, $zipcode: String!, $empId: String! ) {\n  createAddress(input: {line1: $line1, line2: $line2, city: $city, state: $state, zipcode: $zipcode, empId: $empId  }) {\n    id\n  }\n}\n`;\n\nexport const CREATE_SKILL = gql`\nmutation createSkill($name: String!, $empId: String! ) {\n  createSkill(input: {name: $name, empId: $empId  }) {\n    id\n  }\n}\n`;\n\n\nexport const createEmployee = /* GraphQL */ `\n  mutation CreateEmployee(\n    $input: CreateEmployeeInput!\n    $condition: ModelEmployeeConditionInput\n  ) {\n    createEmployee(input: $input, condition: $condition) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const updateEmployee = /* GraphQL */ `\n  mutation UpdateEmployee(\n    $input: UpdateEmployeeInput!\n    $condition: ModelEmployeeConditionInput\n  ) {\n    updateEmployee(input: $input, condition: $condition) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const deleteEmployee = /* GraphQL */ `\n  mutation DeleteEmployee(\n    $input: DeleteEmployeeInput!\n    $condition: ModelEmployeeConditionInput\n  ) {\n    deleteEmployee(input: $input, condition: $condition) {\n      id\n      firstName\n      lastName\n      address {\n        id\n        line1\n        line2\n        city\n        state\n        zipcode\n        empId\n      }\n      skills {\n        id\n        name\n        empId\n      }\n    }\n  }\n`;\nexport const createAddress = /* GraphQL */ `\n  mutation CreateAddress(\n    $input: CreateAddressInput!\n    $condition: ModelAddressConditionInput\n  ) {\n    createAddress(input: $input, condition: $condition) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const updateAddress = /* GraphQL */ `\n  mutation UpdateAddress(\n    $input: UpdateAddressInput!\n    $condition: ModelAddressConditionInput\n  ) {\n    updateAddress(input: $input, condition: $condition) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const deleteAddress = /* GraphQL */ `\n  mutation DeleteAddress(\n    $input: DeleteAddressInput!\n    $condition: ModelAddressConditionInput\n  ) {\n    deleteAddress(input: $input, condition: $condition) {\n      id\n      line1\n      line2\n      city\n      state\n      zipcode\n      empId\n    }\n  }\n`;\nexport const createSkill = /* GraphQL */ `\n  mutation CreateSkill(\n    $input: CreateSkillInput!\n    $condition: ModelSkillConditionInput\n  ) {\n    createSkill(input: $input, condition: $condition) {\n      id\n      name\n      empId\n    }\n  }\n`;\nexport const updateSkill = /* GraphQL */ `\n  mutation UpdateSkill(\n    $input: UpdateSkillInput!\n    $condition: ModelSkillConditionInput\n  ) {\n    updateSkill(input: $input, condition: $condition) {\n      id\n      name\n    }\n  }\n`;\nexport const deleteSkill = /* GraphQL */ `\n  mutation DeleteSkill(\n    $input: DeleteSkillInput!\n    $condition: ModelSkillConditionInput\n  ) {\n    deleteSkill(input: $input, condition: $condition) {\n      id\n      name\n      empId\n    }\n  }\n`;\n","import _ from 'lodash';\n\nexport const employeesPartitioning = (emps, adds, skills) => {\n  for (const [i, e] of emps.entries()) {\n    emps[i][\"addresss\"] = [];\n    emps[i][\"skills\"] = [];\n    adds.filter(a => {\n      if (a.empId === e.id) {\n        emps[i].addresss.push(a);\n        return;\n      }\n    });\n    skills.filter(s => {\n      if (s.empId === e.id) {\n        emps[i].skills.push(s);\n        return;\n      }\n    });\n    emps[i][\"trimAddress\"] = dataTrim(\n      emps[i].addresss[0].line1,\n      emps[i].addresss.length - 1\n    );\n    emps[i][\"trimSkill\"] = dataTrim(\n      emps[i].skills[0].name,\n      emps[i].skills.length - 1\n    );\n  }\n  return emps;\n};\n\nexport const dataTrim = (label, len) => {\n  return len > 0\n    ? `${label.substring(0, 10)}... + ${len} more`\n    : `${label.substring(0, 10)} ...`;\n};\n\nexport const isValid = (data, fieldTypes) => {\n  const error = new Object(null);\nfor (const ft of fieldTypes) {\n  if (ft.type === 'STRING' ) {\n    if(!data[ft.key] || data[ft.key] === '0') {\n        error[ft.key] = ft.key + \" should not be empty\";\n    }\n  } else if (ft.type === 'OBJECT') {\n    if(_.isEmpty(data[ft.key])) {\n        error[ft.key] = \"Minimum one \"+ ft.key + \" required\";\n    }\n  }\n}\n  return error;\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default function ConformationModal(props) {\n  const { isOpen, confirm, cancel, message, title } = props;\n  const handleClose = () => {\n    cancel();\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {title}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {message}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={confirm} color=\"primary\" autoFocus>\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function Spinner() {\n  return <div className=\"spinner\"><CircularProgress disableShrink /></div>;\n}","import React, { useState } from \"react\";\nimport Header from \"../common/header\";\nimport TableViewWithAction from \"../common/tableView\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport { GET_EMPLOYEES, listSkills } from \"../graphql/queries\";\nimport {DELETE_ADDRESS, DELETE_SKILL, DELETE_EMPLOYEE} from '../graphql/mutations';\nimport { employeesPartitioning } from \"../commonMethods\";\nimport ConformationModal from '../common/conformationModal';\nimport Spinner from '../common/spinner';\n\n// export const GET_EMPLOYEES = gql`\n//   query {\n//     listEmployees {\n//       items {\n//         id\n//         firstName\n//         lastName\n//       }\n//     }\n//   }\n// `;\n\nconst tableHeader = () => {\n  return [\n    { label: \"FirstName\", key: \"firstName\" },\n    { label: \"LastName\", key: \"lastName\" },\n    { label: \"Addresss\", key: \"trimAddress\" },\n    { label: \"skills\", key: \"trimSkill\" }\n  ];\n};\n\nconst tableBody = emps => {\n  return emps;\n};\n\nconst navEmpForm = () => {\n  return (\n    <Link to=\"/form/0\" className=\"linkBtn\">\n      Add New\n    </Link>\n  );\n};\n\nfunction Home() {\n  const history = useHistory();\n  const [state, setState] = useState({isOpen: false, empId:'', index: -1, deleteData:{} });\n  const { data, loading, error } = useQuery(GET_EMPLOYEES);\n  let modifyData = [];\n  if (data) {\n    modifyData = employeesPartitioning(\n      [...data.listEmployees.items],\n      [...data.listAddresss.items],\n      [...data.listSkills.items]\n    );\n  }\n  const [deleteEmployeeMutate] = useMutation(DELETE_EMPLOYEE);\n  const [deleteAddressMutate] = useMutation(DELETE_ADDRESS);\n  const [deleteSkillMutate] = useMutation(DELETE_SKILL);\n  const editEmp = empId => {\n    history.push(`/form/${empId}`);\n  };\n\n  const deleteSkills = async(skillIds) => {\n    for (const s of skillIds) {\n      const data = await deleteSkillMutate({\n        variables: { id: s }\n      });\n    }\n  };\n\n  const deleteAddresss = async(addressIds) => {\n    for (const a of addressIds) {\n      const data = await deleteAddressMutate({\n        variables: { id: a }\n      });\n    }\n  };\n\n  const deleteEmp = async() => {\n    const skillIds = state.deleteData.skills.map(s => s.id);\n    const addressIds = state.deleteData.addresss.map(a => a.id);\n    await deleteAddresss(addressIds);\n    await deleteSkills(skillIds);\n    await deleteEmployeeMutate({\n      variables: { id: state.empId },\n      refetchQueries: [\n        {\n          query: GET_EMPLOYEES\n        }\n      ]\n    });\n    setState({isOpen: false, empId:'', index: -1, deleteData:{} });\n  };\n\n  const confirmationAgree = () => {\n    deleteEmp();\n  }\n\nconst openModal = (empId, deleteEmployeeMutate, index, deleteData) => {\n  state.isOpen = true;\n  state.deleteData = deleteData;\n  state.index = index;\n  state.empId = empId;\n  setState({...state});\n}\n\n  const closeModal = () => {\n    setState({isOpen: false, empId:'', index: -1, deleteData:{} });\n  }\n\n  return (\n    <>\n    {loading && <Spinner/>}\n      <Header addNew={navEmpForm()} label={\"EmployeeList\"} />\n      <div className=\"pl30 pr30 pt30\">\n        {!loading ? (\n          <TableViewWithAction\n            bodyData={tableBody(modifyData)}\n            heading={tableHeader()}\n            deleteMutate={deleteEmployeeMutate}\n            edit={editEmp}\n            isAction={true}\n            del={openModal}\n          />\n        ) : (\n          \"Data not found\"\n        )}\n      </div>\n      <ConformationModal  title={\"Conformation\"} message={\"Do you want delete this employee ?\"} isOpen={state.isOpen} confirm={confirmationAgree} cancel={closeModal}/>\n    </>\n  );\n}\n\nexport default Home;\n","export const empValidationFields = [\n    {type: 'STRING',key: 'firstName'},\n    {type: 'STRING',key: 'lastName'},\n    {type: 'OBJECT',key: 'skills'},\n    {type: 'OBJECT',key: 'addresss'}\n];\n\nexport const addressValidationFields = [\n    {type: 'STRING',key: 'line1'},\n    {type: 'STRING',key: 'line2'},\n    {type: 'STRING',key: 'zipcode'},\n    {type: 'STRING',key: 'city'},\n    {type: 'STRING',key: 'state'}\n];\n\nexport const skillValidationFields = [\n    {type: 'STRING',key: 'name'}\n];","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport TableViewWithAction from \"./tableView\";\nimport {addressValidationFields} from '../validationFieldTypes';\nimport {isValid} from '../commonMethods';\nimport * as _ from \"lodash\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst cities = [\n  { id: \"1\", name: \"Chennai\", stateId: \"1\" },\n  { id: \"2\", name: \"Trichy\", stateId: \"1\" },\n  { id: \"3\", name: \"Karaikudi\", stateId: \"1\" },\n  { id: \"4\", name: \"Visagapattinam\", stateId: \"2\" },\n  { id: \"5\", name: \"Vijayavada\", stateId: \"2\" }\n];\nconst states = [\n  { id: \"1\", name: \"TamilNadu\" },\n  { id: \"2\", name: \"Andra Pradesh\" }\n];\n\nconst tableHeader = () => {\n  return [\n    { label: \"Line 1\", key: \"line1\" },\n    { label: \"Line2\", key: \"line2\" },\n    { label: \"City\", key: \"cityName\" },\n    { label: \"State\", key: \"stateName\" },\n    { label: \"Zipcode\", key: \"zipcode\" }\n  ];\n};\nconst handleStateChange = (value, setState, state) => {\n  state.cities = cities.filter(c => c.stateId === value);\n  state.form.state = value;\n  setState({ ...state });\n};\n\nconst add = (setState, state, addresss, ancestorSetState) => {\n  if (_.isEmpty(isValid(state.form, addressValidationFields))) {\n    state.form[\"cityName\"] = cities.find(c => c.id === state.form.city).name;\n    state.form[\"stateName\"] = states.find(s => s.id === state.form.state).name;\n    if (state.editIndex < 0) {\n      addresss.push({ ...state.form });\n    } else {\n      addresss[state.editIndex] = { ...state.form };\n    }\n    ancestorSetState(addresss);\n    setState({\n      cities: [],\n      editIndex: -1,\n      form: { line1: \"\", line2: \"\", zipcode: \"\", city: \"\", state: \"\" }\n    });\n  }\n};\n\nconst locationNameCon = data => {\n  data.map(d => {\n    d[\"stateName\"] = states.find(s => s.id === d.state).name;\n    d[\"cityName\"] = cities.find(c => c.id === d.city).name;\n  });\n};\n\nfunction AddresssForm(props) {\n  const [state, setData] = useState({\n    form: { line1: \"\", line2: \"\", zipcode: \"\", city: \"\", state: \"\" },\n    cities: [],\n    editIndex: -1\n  });\n  const { addresss, ancestorSetState, collectDelId } = props;\n  if (addresss) {\n    locationNameCon(addresss);\n  }\n  const classes = useStyles();\n  const edit = (dataId, index) => {\n    state.cities = cities.filter(c => c.stateId === addresss[index].state);\n    state.form = addresss[index];\n    state.editIndex = index;\n    setData({ ...state });\n  };\n\n  const del = (id, deleteMut, index) => {\n    if (id) {\n      collectDelId(id);\n    }\n    addresss.splice(index, 1);\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardHeader title=\"Address\" />\n        <CardContent>\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <Grid container spacing={3}>\n              <Grid item xs={4}>\n                <TextField\n                  required\n                  label=\"Line1\"\n                  style={{ width: \"95%\" }}\n                  onChange={e =>\n                    setData({\n                      ...state,\n                      form: { ...state.form, line1: e.target.value }\n                    })\n                  }\n                  value={state.form.line1}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <TextField\n                  required\n                  label=\"Line2\"\n                  style={{ width: \"95%\" }}\n                  onChange={e =>\n                    setData({\n                      ...state,\n                      form: { ...state.form, line2: e.target.value }\n                    })\n                  }\n                  value={state.form.line2}\n                />\n              </Grid>\n              <Grid item xs={4}>\n                <FormControl\n                  className={classes.formControl}\n                  style={{ width: \"93%\" }}\n                >\n                  <InputLabel id=\"demo-simple-select-label\">State</InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={state.form.state}\n                    onChange={e =>\n                      handleStateChange(e.target.value, setData, state)\n                    }\n                  >\n                    {states.map(s => (\n                      <MenuItem value={s.id} key={s.id}>\n                        {s.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <FormControl\n                  className={classes.formControl}\n                  style={{ width: \"100%\" }}\n                >\n                  <InputLabel id=\"demo-simple-select-label\">City</InputLabel>\n                  <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={state.form.city}\n                    onChange={e =>\n                      setData({\n                        ...state,\n                        form: { ...state.form, city: e.target.value }\n                      })\n                    }\n                  >\n                    {state.cities.map(c => (\n                      <MenuItem value={c.id} key={c.id}>\n                        {c.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  required\n                  label=\"Zipcode\"\n                  style={{ width: \"95%\" }}\n                  value={state.form.zipcode}\n                  onChange={e =>\n                    setData({\n                      ...state,\n                      form: { ...state.form, zipcode: e.target.value }\n                    })\n                  }\n                />\n              </Grid>\n            </Grid>\n          </form>\n        </CardContent>\n        <CardActions className=\"right\" style={{ marginRight: \"22px\" }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => add(setData, state, addresss, ancestorSetState)}\n          >\n            {\"Add\"}\n          </Button>\n        </CardActions>\n        <CardContent>\n          {addresss && !_.isEmpty(addresss) && (\n            <TableViewWithAction\n              bodyData={addresss}\n              heading={tableHeader()}\n              edit={edit}\n              isAction={true}\n              del={del}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n\nexport default AddresssForm;\n","import React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst keyPress = (name, e, ancestorStateChange, state, setValue) => {\n  if (e.keyCode == 13) {\n    if (e.target.value !== \"\") {\n      const temp = [...state.form.skills];\n      temp.push({ name: e.target.value });\n      setValue(\"\");\n      ancestorStateChange(name, temp, undefined);\n    }\n  }\n};\n\nconst handleDelete = (name, chips, index, ancestorStateChange) => {\n  const id = chips[index].id;\n  chips.splice(index, 1);\n  ancestorStateChange(name, [...chips], id);\n};\n\nfunction MultiSelectTextField(props) {\n  const [value, setValue] = useState(\"\");\n  const { fieldKey, ancestorStateChange, state, chips } = props;\n  return (\n    <>\n      <div>\n        <TextField\n          required\n          label=\"Skills\"\n          onChange={e => setValue(e.target.value)}\n          onKeyDown={e =>\n            keyPress(fieldKey, e, ancestorStateChange, state, setValue)\n          }\n          value={value}\n        />\n        <div>\n          {chips.map((c, index) => (\n            <Chip\n              // avatar={<Avatar alt=\"Natacha\" src=\"/static/images/avatar/1.jpg\" />}\n              key={index}\n              label={c.name}\n              onDelete={e =>\n                handleDelete(e, [...chips], index, ancestorStateChange)\n              }\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default MultiSelectTextField;\n","import React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport Button from \"@material-ui/core/Button\";\nimport gql from \"graphql-tag\";\nimport { useHistory } from \"react-router-dom\";\nimport { GET_EMPLOYEES, GET_EMPLOYEE_BY_ID } from \"../graphql/queries\";\nimport _ from \"lodash\";\nimport AddresssForm from \"../common/addressForm\";\nimport Spinner from \"../common/spinner\";\nimport {\n  CREATE_EMPLOYEE,\n  CREATE_ADDRESS,\n  CREATE_SKILL,\n  UPDATE_EMPLOYEE,\n  DELETE_ADDRESS,\n  DELETE_SKILL,\n  UPDATE_ADDRESS,\n  UPDATE_SKILL\n} from \"../graphql/mutations\";\nimport Header from \"../common/header\";\nimport MultiSelectTextField from \"../common/multiSelectText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { employeesPartitioning, isValid } from \"../commonMethods\";\nimport {empValidationFields} from '../validationFieldTypes';\n\nconst fakeData = {\n  firstName: \"sathish\",\n  lastName: \"kumar\",\n  addresss: [\n    {\n      line1: \"9th cross\",\n      line2: \"nethaji street\",\n      zipcode: \"600042\",\n      city: \"1\",\n      state: \"1\"\n    }\n  ],\n  skills: [{ name: \"reactjs\" }]\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"100%\"\n    }\n  },\n  minWidth: 275,\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n}));\n\nconst createEmp = async (firstName, lastName, createEmployeeMutate) => {\n  const { data } = await createEmployeeMutate({\n    variables: { firstName, lastName }\n  });\n  return data.createEmployee.id;\n};\n\nconst createAddresss = async (addresss, createAddressMutate) => {\n  for (const a of addresss) {\n    const data = await createAddressMutate({\n      variables: {\n        line1: a.line1,\n        line2: a.line2,\n        city: a.city,\n        state: a.state,\n        zipcode: a.zipcode,\n        empId: a.empId\n      }\n    });\n  }\n};\n\nconst createSkills = async (skills, createSkillMutate) => {\n  for (const s of skills) {\n    const data = await createSkillMutate({\n      variables: { name: s.name, empId: s.empId },\n      refetchQueries: [\n        {\n          query: GET_EMPLOYEES\n        }\n      ]\n    });\n  }\n};\n\nconst createAddressAndSkill = (\n  data,\n  createAddressMutate,\n  createSkillMutate,\n  form\n) => {\n  if (data.createEmployee.id) {\n    form.addresss.map(a => {\n      a[\"empId\"] = data.createEmployee.id;\n    });\n    form.skills.map(s => {\n      s[\"empId\"] = data.createEmployee.id;\n    });\n    createAddresss(form.addresss, createAddressMutate);\n    createSkills(form.skills, createSkillMutate);\n  }\n};\n\nconst save = async (\n  form,\n  createEmployeeMutate,\n  history,\n  empId,\n  updateEmployeeMutate,\n  delSkillIds,\n  delAddressIds\n) => {\n  if (_.isEmpty(isValid(form, empValidationFields))) {\n    await createEmp(form.firstName, form.lastName, createEmployeeMutate);\n    history.push(\"/home\");\n  }\n};\n\nconst handleFormChange = (name, value, setStateData, state) => {\n  setStateData({ ...state, form: { ...state.form, [name]: value } });\n};\n\nconst handleChange = (name, value, setStateData, state) => {\n  setStateData({ ...state, [name]: value });\n};\n\nfunction Empform(props) {\n  const history = useHistory();\n  const [state, setStateData] = useState({\n    skill: \"\",\n    delAddressIds: [],\n    delSkillIds: [],\n    form: {\n      firstName: \"\",\n      lastName: \"\",\n      address: [],\n      skills: []\n    }\n  });\n  const { data, loading } = useQuery(GET_EMPLOYEE_BY_ID, {\n    variables: { id: props.match.params.empId, empId: props.match.params.empId }\n  });\n  const [createEmployeeMutate, { error }] = useMutation(\n    CREATE_EMPLOYEE,\n    {\n      onCompleted: data =>\n        createAddressAndSkill(\n          data,\n          createAddressMutate,\n          createSkillMutate,\n          state.form\n        )\n    }\n  );\n  const [createAddressMutate] = useMutation(CREATE_ADDRESS);\n  const [createSkillMutate] = useMutation(CREATE_SKILL);\n  const [updateEmployeeMutate] = useMutation(UPDATE_EMPLOYEE);\n  const [updateAddressMutate] = useMutation(UPDATE_ADDRESS);\n  const [updateSkillMutate] = useMutation(UPDATE_SKILL);\n  const [deleteAddressMutate] = useMutation(DELETE_ADDRESS);\n  const [deleteSkillMutate] = useMutation(DELETE_SKILL);\n  const classes = useStyles();\n\n  const formSkillsChange = (name, value, skillId) => {\n    if (skillId) {\n      state.delSkillIds.push(skillId);\n      state.form.skills = value;\n      setStateData({ ...state });\n    } else {\n      setStateData({ ...state, form: { ...state.form, [name]: value } });\n    }\n  };\n\n  useEffect(() => {\n    if (data) {\n      if (data.getEmployee) {\n        setStateData({\n          ...state,\n          form: employeesPartitioning(\n            [{ ...data.getEmployee }],\n            [...data.listAddresss.items],\n            [...data.listSkills.items]\n          )[0]\n        });\n      }\n    }\n  }, [data]);\n\n  const addresssStateChange = addresss => {\n    setStateData({ ...state, form: { ...state.form, addresss } });\n  };\n\n  const collectDelId = id => {\n    state.delAddressIds.push(id);\n    setStateData({ ...state, delAddressIds: state.delAddressIds });\n  };\n\n  const Update = async () => {\n    if (_.isEmpty(isValid(state.form, empValidationFields))) {\n      if (props.match.params.empId && props.match.params.empId !== \"0\") {\n        if (!_.isEmpty(state.delSkillIds)) {\n          for (const s of state.delSkillIds) {\n            const data = await deleteSkillMutate({\n              variables: { id: s }\n            });\n          }\n        }\n        if (!_.isEmpty(state.delAddressIds)) {\n          for (const a of state.delAddressIds) {\n            const data = await deleteAddressMutate({\n              variables: { id: a }\n            });\n          }\n        }\n        for (const a of state.form.addresss) {\n          if (a.id) {\n            console.log(a);\n            await updateAddressMutate({\n              variables: {\n                id: a.id,\n                line1: a.line1,\n                line2: a.line2,\n                state: a.state,\n                city: a.city,\n                zipcode: a.zipcode,\n                empId: props.match.params.empId\n              }\n            });\n          } else {\n            await createAddressMutate({\n              variables: {\n                line1: a.line1,\n                line2: a.line2,\n                city: a.city,\n                state: a.state,\n                zipcode: a.zipcode,\n                empId: props.match.params.empId\n              }\n            });\n          }\n        }\n        for (const s of state.form.skills) {\n          if (s.id) {\n            await updateSkillMutate({\n              variables: {\n                id: s.id,\n                name: s.name,\n                empId: props.match.params.empId\n              }\n            });\n          } else {\n            await createSkillMutate({\n              variables: {\n                name: s.name,\n                empId: props.match.params.empId\n              }\n            });\n          }\n        }\n        await updateEmployeeMutate({\n          variables: {\n            id: props.match.params.empId,\n            firstName: state.form.firstName,\n            lastName: state.form.lastName\n          },\n          refetchQueries: [\n            {\n              query: GET_EMPLOYEES\n            }\n          ]\n        });\n        history.push(\"/home\");\n      }\n    }\n  };\n\n  console.log(state);\n\n  return (\n    <>\n    {loading && <Spinner/>}\n      <Header label={\"Employee Form\"} />\n      <div className=\"ml9rem mr9rem mt40\">\n        <Card className={classes.root}>\n          <CardContent>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              <div>\n                <Grid container spacing={3}>\n                  <Grid item xs={4}>\n                    <TextField\n                      required\n                      id=\"standard-required\"\n                      label=\"FirstName\"\n                      onChange={e =>\n                        handleFormChange(\n                          \"firstName\",\n                          e.target.value,\n                          setStateData,\n                          state\n                        )\n                      }\n                      value={state.form.firstName}\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <TextField\n                      required\n                      id=\"standard-required\"\n                      label=\"LastName\"\n                      onChange={e =>\n                        handleFormChange(\n                          \"lastName\",\n                          e.target.value,\n                          setStateData,\n                          state\n                        )\n                      }\n                      value={state.form.lastName}\n                    />\n                  </Grid>\n                  <Grid item xs={4}>\n                    <MultiSelectTextField\n                      fieldKey={\"skills\"}\n                      ancestorStateChange={formSkillsChange}\n                      state={state}\n                      chips={state.form.skills}\n                    />\n                  </Grid>\n                </Grid>\n              </div>\n              <div className=\"mt30\">\n                <AddresssForm\n                  ancestorSetState={addresssStateChange}\n                  addresss={state.form.addresss ? state.form.addresss : []}\n                  collectDelId={collectDelId}\n                />\n              </div>\n            </form>\n          </CardContent>\n          <CardActions className=\"right\">\n            {props.match.params.empId !== \"0\" && props.match.params.empId ? (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => Update()}\n              >\n                Update\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() =>\n                  save(\n                    state.form,\n                    createEmployeeMutate,\n                    history,\n                    props.match.params.empId,\n                    updateEmployeeMutate,\n                    createAddressMutate,\n                    createSkillMutate,\n                    state.delSkillIds,\n                    state.delAddressIds\n                  )\n                }\n              >\n                Save\n              </Button>\n            )}\n          </CardActions>\n        </Card>\n      </div>\n    </>\n  );\n}\n\nexport default Empform;\n","import React from \"react\";\nimport \"./App.css\";\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport { Query } from \"react-apollo\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/home\";\nimport Empform from \"./pages/empform\";\n// import { createBrowserHistory } from \"history\";\n// const emps = await API.graphql(graphqlOperation(query));\n\n // const history = createBrowserHistory();\n\nfunction App(props) {\n  return (\n    <div className=\"App bgBlueAsh\">\n      <Router>\n        <Switch>\n          <Route path=\"/form/:empId\"render={props => <Empform {...props}/>}>\n          </Route>\n          <Route path=\"/\">\n            <Home client={props.client}/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-west-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://3kqa2bt5qzg6rkbbgsuorywybq.appsync-api.us-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-west-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-swaqwisp65e3nhnyu2swagorde\"\n};\n\n\nexport default awsmobile;\n","import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Amplify from \"aws-amplify\";\nimport config from \"./aws-exports\";\nimport gql from \"graphql-tag\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri:\n    \"https://3kqa2bt5qzg6rkbbgsuorywybq.appsync-api.us-west-2.amazonaws.com/graphql\",\n  headers: {\n    \"X-Api-Key\": \"da2-swaqwisp65e3nhnyu2swagorde\"\n  }\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer da2-swaqwisp65e3nhnyu2swagorde`\n    }\n  };\n});\n\nconst client = new ApolloClient({\n  cache,\n  link: authLink.concat(httpLink)\n});\n\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <ApolloProvider client= {client}>\n    <App client={client}/>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}